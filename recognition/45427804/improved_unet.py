# -*- coding: utf-8 -*-
"""Improved_Unet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Ksvze7dZUFfxQ9smMSx2VhjpPsRMzv6
"""

#Improved Unet
inputs = Input(shape=(256, 256, 1))

Conv = Conv2D(16, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(inputs)

'''
context module: it is a pre-activation residual block with two 3X3X3 convolutional layers and a dropout layer (drop = 0.3) 
in between, and it is followed by 3x3x3 convolutions with input stride 2. The purpose is to allow more features while downing 
to the aggregation pathway and to reduce the resolution of the feature maps. There are 5 context modules in the model which 
are cont1, cont2, cont3, cont4 and cont5
'''

Cont1 = Conv2D(16, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(Conv)
D1 = Dropout(0.3)(Cont1)
Cont1 = Conv2D(16, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(D1)
Cont1 = Add()([Conv, Cont1])# using Add combine previous convolution

# context module is followed by 3x3x3 convolutions with input stride 2.
down1 = Conv2D(32, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same', strides=(2, 2))(Cont1)

Cont2 = Conv2D(32, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(down1)
D2 = Dropout(0.3)(Cont2)
Cont2 = Conv2D(32, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(D2)   
Cont2 = Add()([down1, Cont2])

down2 = Conv2D(64, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same', strides=(2, 2))(Cont2)
    
Cont3 = Conv2D(64, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(down2)
D3 = Dropout(0.3)(Cont3)
Cont3 = Conv2D(64, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(D3)
Cont3 = Add()([down2, Cont3])

down3 = Conv2D(128, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same', strides=(2, 2))(Cont3)
    
Cont4 = Conv2D(128, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(down3)
D4 = Dropout(0.3)(Cont4)
Cont4 = Conv2D(128, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(D4)   
Cont4 = Add()([down3, Cont4])

down4 = Conv2D(256, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same', strides=(2, 2))(Cont4)

Cont5 = Conv2D(256, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(down4)
D5 = Dropout(0.3)(Cont5)
Cont5 = Conv2D(256, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(D5)
Cont5 = Add()([down4, Cont5])

'''Upsampling modul: it is to upsampling the low-resolution feature maps and connected by a 3x3x3 convolution that halves the number of feature
maps. There are 4 upsampling modul which are up1, up2,up3, up4'''

up1 = UpSampling2D()(Cont5)
up1 = Conv2D(128, (3, 3), padding='same')(up1)

# concatenate() is to connect upsampling layer and context module
Conca1 = concatenate([up1, Cont4])

'''locolization module: it contains a 3x3x3 convolution and a 1x1x1 convolution which reduces half of number of feature maps.'''
Local1 = Conv2D(128, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(Conca1)
Local1 = Conv2D(128, (1, 1), activation=LeakyReLU(alpha=0.01), padding='same')(Local1)

up2 = UpSampling2D()(Local1)
up2 = Conv2D(64, (3, 3), padding='same')(up2)

Conca2 = concatenate([up2, Cont3])

Local2 = Conv2D(64, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(Conca2)
Local2 = Conv2D(64, (1, 1), activation=LeakyReLU(alpha=0.01), padding='same')(Local2)

up3 = UpSampling2D()(Local2)
up3 = Conv2D(32, (3, 3), padding='same')(up3)

Conca3 = concatenate([up3, Cont2])

Local3 = Conv2D(32, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(Conca3)
Local3 = Conv2D(32, (1, 1), activation=LeakyReLU(alpha=0.01), padding='same')(up3)


up4 = UpSampling2D()(Local3)
up4 = Conv2D(16, (3, 3), padding='same')(up4)

Conca4 = concatenate([up4, Cont1])

M10 = Conv2D(32, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(Conca4)

#add all segmentation layers
Seg1 = Conv2D(4, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(Local2)
Seg1 = UpSampling2D()(Seg1)
Seg2 = Conv2D(4, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(up3)
Seg3 = Conv2D(4, (3, 3), activation=LeakyReLU(alpha=0.01), padding='same')(M10)

seg12 = Add()([Seg1, Seg2])
seg12 = UpSampling2D()(seg12)
seg123 = Add()([seg12, Seg3])

final = Conv2D(4, (1, 1), activation="softmax")(seg123)
model = Model(inputs=inputs, outputs=final)