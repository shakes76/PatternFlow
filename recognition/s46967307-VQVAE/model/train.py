import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import tensorflow as tf
from model.modules import latent_dims, num_embeddings, get_indices, pixelcnn_input_shape

def train_vqvae(model, raw_data):
    """
    train_model
    args: model - any vqvae model
          raw_data - a numpy array of images of the size of vqvae input
    returns: the model trained on the raw data
    """
    history = model.fit(raw_data,
              raw_data,
              epochs=2,
              batch_size=32
              )

    return (model, history)


def train_pixelcnn(pixelcnn, raw_data, vqvae):
    """
    train_pixelcnn
    args: pixelcnn - any pixelcnn vqvae of the form generated by get_pixelcnn
          raw_data - a numpy array of images of the size of vqvae input
          vqvae - vqvae which the pixelcnn is learning
    returns: the pixelcnn trained on the raw data
    """
    history = None
    # Slice the dataset into two to avoid OOM while training
    for i in range(2):
        dataset = tf.data.Dataset.from_tensor_slices(
            raw_data[(i)*3*1024:(i+1)*3*1024])
        dataset = dataset.batch(32)
        pred = None
        for batch in dataset:
            if pred is None:
                pred = vqvae.encoder.predict(batch)
            else:
                pred = tf.concat(
                    [pred, vqvae.encoder.predict(batch)], axis=0)

        encoded = tf.reshape(pred, shape=(-1, latent_dims))
        indices = get_indices(
            vqvae.vq.variables[0], encoded, quantize=False, splits=64)
        indices = tf.reshape(
            indices, shape=(-1, *pixelcnn_input_shape[0:2]))

        new_hist = pixelcnn.fit(
            x=tf.concat([indices], axis=0),
            y=tf.reshape(tf.cast(tf.one_hot(tf.cast(tf.concat([indices], axis=0), dtype=tf.int64),
                                            num_embeddings), dtype=tf.float64), shape=(-1, *pixelcnn_input_shape[0:2], num_embeddings)),
            batch_size=64,
            epochs=10,
            validation_split=0.1)
        
        if history is None:
            history = new_hist

    return (pixelcnn, history)
