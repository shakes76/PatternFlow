# -*- coding: utf-8 -*-
"""numbthy_driver_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1an3dKDxR9gAPUURheevzwufJrCUByRf8
"""

from google.colab import drive
drive.mount('/content/drive')

import sys
sys.path.append('/content/drive/My Drive/UQ/2019 S2/comp3710/Colab Notebooks/as3')

from numbthy import *
import tensorflow as tf

def main():
    print("--------------- euler_criterion function ------------------")
    print("euler_criterion(13, 12): ",euler_criterion(13, 12))
    print("euler_criterion(13, 12): ",euler_criterion(13, 12).eval())
    print("euler_criterion(34, 23): ",euler_criterion(34, 23))
    print("euler_criterion(34, 23): ",euler_criterion(34, 23).eval())
    print("")

    print("----------------------- gcd function ----------------------")
    print("gcd(2040,1071): ",gcd(2040,1071))
    print("gcd(2040,1071): ",gcd(2040,1071).eval())
    print("gcd(25,13): ",gcd(25,13))
    print("gcd(25,13): ",gcd(25,13).eval())
    print("")

    print("---------------------- xgcd function ----------------------")
    output = xgcd(65,78)
    print("xgcd(65,78): ",output)
    result = []
    for i in output:
        result.append(i.eval())
    print("xgcd(65,78): ",tuple(result))

    output = xgcd(85,58)
    print("xgcd(65,78): ",output)
    result = []
    for i in output:
        result.append(i.eval())
    print("xgcd(65,78): ",tuple(result))
    print("")

    print("------------------- power_mod function --------------------")
    print("power_mod(4,7,9): ",power_mod(4,7,9))
    print("power_mod(4,7,9): ",power_mod(4,7,9).eval())
    print("power_mod(3,5,6): ",power_mod(3,5,6))
    print("power_mod(3,5,6): ",power_mod(3,5,6).eval())
    print("")
    
    print("----------------- inverse_mod function --------------------")
    print("inverse_mod(4,7): ",inverse_mod(4,7))
    print("inverse_mod(4,7): ",inverse_mod(4,7).eval())
    print("inverse_mod(22,32): ",inverse_mod(7,31))
    print("inverse_mod(22,32): ",inverse_mod(7,31).eval())
    print("")
    
    print("------------------ is_prime function -----------------------")
    print("is_prime(15): ",is_prime(15))
    print("is_prime(15): ",is_prime(15).eval())
    print("is_prime(27): ",is_prime(27))
    print("is_prime(27): ",is_prime(27).eval())

    print("")
    
    print("------------------ factor function --------------------------")
    output = factor(42)
    print("factor(42): ",output)
    result1 = []
    result2 = []
    for i in output:
        for j in i:
            result1.append(j.eval())
        result2.append(tuple(result1))
        result1 = []
    print("factor(42): ",tuple(result2))

    output = factor(23)
    print("factor(23): ",output)
    result1 = []
    result2 = []
    for i in output:
        for j in i:
            result1.append(j.eval())
        result2.append(tuple(result1))
        result1 = []
    print("factor(23): ",tuple(result2))
    print("")
    
    print("---------------- prime_divisors function --------------------")
    print("prime_divisors(100)",prime_divisors(100))
    print("prime_divisors(100)",prime_divisors(100).eval())
    print("prime_divisors(456)",prime_divisors(456))
    print("prime_divisors(456)",prime_divisors(456).eval())
    print("")
    
    print("------------------ euler_phi function ------------------------")
    print("euler_phi(8)",euler_phi(8))
    print("euler_phi(8)",euler_phi(8).eval())
    print("euler_phi(56)", euler_phi(56))
    print("euler_phi(56)", euler_phi(56).eval())
    print("")
    
    print("-------------- carmichael_lambda function --------------------")
    print("carmichael_lambda(12): ",carmichael_lambda(12))
    print("carmichael_lambda(12): ",carmichael_lambda(12).eval())
    print("carmichael_lambda(23): ",carmichael_lambda(23))
    print("carmichael_lambda(23): ",carmichael_lambda(23).eval())
    print("")
    
    print("-------------- is_primitive_root function --------------------")
    print("is_primitive_root(23,11): ",is_primitive_root(23,11))
    print("is_primitive_root(23,11): ",is_primitive_root(23,11).eval())
    print("is_primitive_root(60,73): ",is_primitive_root(60,73))
    print("is_primitive_root(60,73): ",is_primitive_root(60,73).eval())
    print("")
    
    print("------------------ isprimeF function -------------------------")
    print("isprimeF(33,36): ",isprimeF(33,36))
    print("isprimeF(33,36): ",isprimeF(33,36).eval())
    print("isprimeF(26,27): ",isprimeF(26,27))
    print("isprimeF(26,27): ",isprimeF(26,27).eval())
    print("")
    
    print("------------------ isprimeE function -------------------------")
    print("isprimeE(3,4): ",isprimeE(3,4))
    print("isprimeE(3,4): ",isprimeE(3,4).eval())
    print("isprimeE(26,37): ",isprimeE(26,37))
    print("isprimeE(26,37): ",isprimeE(26,37).eval())
    print("")
    
    print("------------------ factorone function -------------------------")
    print("factorone(45): ",factorone(45))
    print("factorone(45): ",factorone(45).eval())
    print("factorone(13): ",factorone(13))
    print("factorone(13): ",factorone(13).eval())
    print("")
    
    print("------------------ factors function -------------------------")
    output = factors(56)
    print("factors(56): ",output)
    result = []
    for i in output:
        result.append(i.eval())
    print("factors(56): ",result)

    output = factors(34)
    print("factors(34): ",output)
    result = []
    for i in output:
        result.append(i.eval())
    print("factors(34): ",result)
    print("")
    
    print("------------------ factorPR function -------------------------")
    print("factorPR(34): ",factorPR(34))
    print("factorPR(34): ",factorPR(34).eval())
    print("factorPR(75): ",factorPR(75))
    print("factorPR(75): ",factorPR(75).eval())

if __name__== "__main__":
    main()