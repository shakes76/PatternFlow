# -*- coding: utf-8 -*-
"""number_theory_gcd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m7gbfsYxbmB8gZMbhnSAJha40KuwQBhk

### Notebook of COMP3710 Report: Tensorflow Implementation of Number Theory Algorithm

Student Name: Letian Yan

Student Number: 44941125
"""

import tensorflow as tf

# tensorflow implementation of computing greatest
# common divisor (gcd) using Euclid algorithm

def gcd_cond(a, b):
  """A function of checking the condition whether a 
     is greater than 0 (with no need of checking b)
  
  Parameters:
     a (tensor int): first number, a 1-d tensor 
     b (tensor int): second number, a 1-d tensor
     
  Return:
     tensor boolean: indicating if a is greater than 0
  """
  return tf.greater(a, tf.constant(0))

def gcd_body(a, b):
  """A function of updating values of two integers 
     while calculating gcd using Euclid algorithm
  
  Parameters:
     a (tensor int): first number, a 1-d tensor 
     b (tensor int): second number, a 1-d tensor
     
  Return:
     tensor int: new value of a
     tensor int: new value of b
  """
  
  b = tf.mod(b,a);
  t = a; a = b; b = t # swap a, b
  return a, b

def gcd(a, b):
  """A function of computing greatest common divisor 
     of two integers using Euclid algorithm
  
  Parameters:
     a (tensor int): first number, a 1-d tensor 
     b (tensor int): second number, a 1-d tensor
     
  Return:
     a 1-d tensor integer which is gcd of a and b
  """
  
  # assign absolute values of a and b
  a = abs(a);
  b = abs(b);
  
  # initialize tensors
  a = tf.Variable(a);
  b = tf.Variable(b);
  
  # call loop to calculate gcd while a is greater than 0
  result = tf.while_loop(gcd_cond, gcd_body, [a, b]);
  
  # initialize session
  init = tf.global_variables_initializer();
  with tf.Session() as sess:
    sess.run(init);
    gcd = sess.run(result)[1];
    
  return gcd

