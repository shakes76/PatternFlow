# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14cJHc8ddA1rgnVcc1-i9EOn8edHhVvW0

### Notebook of COMP3710 Report: Tensorflow Implementation of Number Theory Algorithm

Student Name: Letian Yan

Student Number: 44941125
"""

# this is the main.py which demostrates example usages of the 
# gcd and xgcd modules

from number_theory_gcd import gcd as nt_gcd
from number_theory_xgcd import xgcd as nt_xgcd

test_a1 = 56
test_b1 = 48
test_a2 = 31
tsst_b2 = 25

# use case senario 1: 
# positive integers with greatest common divisor greater than 1
gcd_s1 = nt_gcd(test_a1, test_b1) # gcd_s1: 8
xgcd_s1 = nt_xgcd(test_a1, test_b1) # xgcd_s1: (8, (1, -1))

print("senario 1: Testing Euclidean algorithm")
print("greatest common divisor of integers {0} and {1}:".format(test_a1,test_b1))
print(gcd_s1)
print("")
print("senario 1: Testing extended Euclidean algorithm")
print("gcd and quotients of integers {0} and {1}:".format(test_a1,test_b1))
print(xgcd_s1)
print("")

# use case senario 2: 
# two positive co-primes integers which means gcd(a,b) = 1
gcd_s2 = nt_gcd(test_a2, test_b2) # gcd_s2: 1
xgcd_s2 = nt_xgcd(test_a2, test_b2) # xgcd_s2: (1, (-4, 5))

print("senario 2: Testing Euclidean algorithm")
print("greatest common divisor of integers {0} and {1}:".format(test_a2,test_b2))
print(gcd_s2)
print("")
print("senario 2: Testing extended Euclidean algorithm")
print("gcd and quotients of integers {0} and {1}:".format(test_a2,test_b2))
print(xgcd_s2)
print("")

