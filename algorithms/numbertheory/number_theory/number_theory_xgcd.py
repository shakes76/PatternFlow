# -*- coding: utf-8 -*-
"""number_theory_xgcd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZHvrG7ccmIwJomMHaKn5lLzo9nMHSPP

### Notebook of COMP3710 Report: Tensorflow Implementation of Number Theory Algorithm

Student Name: Letian Yan

Student Number: 44941125
"""

import tensorflow as tf

# tensorflow implementation of extended Euclidean algorithm which
# computes gcd as well as the coefficients of Bézout's identity
# that satisfy ax + by = gcd(a,b)

def xgcd_cond(a, b, coef):
  """A function of checking the condition whether a 
     is greater than 0 (with no need of checking b and coef)
  
  Parameters:
     a (tensor int): first number, a 1-d tensor 
     b (tensor int): second number, a 1-d tensor
     coef (list): list of coefficients (quotients)
     
  Return:
     tensor boolean: indicating if a is greater than 0
  """
  
  return tf.greater(a, tf.constant(0))

def xgcd_body(a, b, coef):
  """A function of updating values of two integers and 
     the quotients while calculating gcd as well as the 
     coefficients of Bézout's identity using extended 
     Euclid algorithm
     
  Parameters:
     a (tensor int): first number, a 1-d tensor 
     b (tensor int): second number, a 1-d tensor
     coef (list): list of coefficients (quotients)
     
  Return:
     tensor int: new value of a
     tensor int: new value of b
     list: new value of coefficients (quotients)
  """
  
  # compute the quotient
  quot = tf.floor_div(b, a)
    
  # compute the remainder
  b = tf.mod(b, a)
  t = a; a = b; b = t # swap a, b

  # assign coefficients
  x1, y1, x2, y2 = coef[0], coef[1], coef[2], coef[3]

  # update x quotients
  x1 = tf.subtract(x1, tf.multiply(quot, x2))
  t = x2; x2 = x1; x1 = t # swap x1, x2

  # update y quotients
  y1 = tf.subtract(y1, tf.multiply(quot, y2))
  t = y2; y2 = y1; y1 = t # swap y1, y2
  
  # update coefficients
  coef = (x1, y1, x2, y2)

  return a, b, coef

def xgcd(a, b):
  """A function of computing greatest common divisor and 
     the coefficients of Bézout's identity (quotients) that 
     satisfy ax + by = gcd(a,b) for two integers a and b 
     using extended Euclidean algorithm
  
  Parameters:
     a (tensor int): first number, a 1-d tensor
     b (tensor int): second number, a 1-d tensor
     
  Return:
     a 1-d tensor integer which is gcd of a and b and 
     a list of two quotients satisfying ax + by = gcd(a,b)
  """
  
  # assign absolute values of a and b
  a = abs(a)
  b = abs(b)
  
  # initialize tensors
  a = tf.Variable(a)
  b = tf.Variable(b)
  
  # initialize coefficients
  x1 = tf.Variable(0); x2 = tf.Variable(1)
  y1 = tf.Variable(1); y2 = tf.Variable(0)
  
  # call loop to calculate gcd and coefficients while a is greater than 0
  loop = tf.while_loop(xgcd_cond, xgcd_body, [a, b, (x1, y1, x2, y2)])
  
  # initialize session
  init = tf.global_variables_initializer();
  
  with tf.Session() as sess:
    sess.run(init);
    result = sess.run(loop)
    # calculate gcd and coefficients (quotients)
    gcd = result[1]
    quots = (result[2][0],result[2][1])
    
    return gcd, quots

